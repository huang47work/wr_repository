<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:annotation-config />

	<context:component-scan base-package="wr.com.controller" />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJackson2HttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
		<property name="webBindingInitializer">
			<bean
				class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
				<property name="conversionService">
					<bean
						class="org.springframework.format.support.FormattingConversionServiceFactoryBean"></bean>
				</property>
			</bean>
		</property>
	</bean>

	<!-- 1.同样是全局设置json响应的日期格式，但此方法可以和@JsonFormat共存，也就是说可以全局设置一个格式，特定的需求可以使用注解设置 
		2.特定的可以设置这样，例如：@JsonFormat(pattern="yyyy-MM-dd HH:mm:ss",timezone = "GMT+8") -->
	<mvc:annotation-driven>
		<!-- 处理responseBody 里面日期类型 -->
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 视图解析器和json解析器 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<!--<property name="viewResolvers"> -->
		<!--<list> -->
		<!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
		<!--<property name="prefix" value="/" /> &lt;!&ndash;可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 
			&ndash;&gt; -->
		<!--<property name="suffix" value=".html"/> -->
		<!--</bean> -->
		<!--</list> -->
		<!--</property> -->
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
			</list>
		</property>
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />

		<!-- 文件大小最大值 ,注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>
	<!-- swagger -->
	<bean id="swaggerConfig" class="com.wangrun.swagger2.SwaggerConfig" />
	<!-- Saves a locale change using a cookie -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
	<!-- <bean id="themeResolver" class="org.springframework.web.servlet.ThemeResolver" 
		/> -->
	<!-- theme解析器 -->
	<!-- <bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"> 
		<property name="paramName" value="themeName"></property> </bean> <bean id="themeSource" 
		class="org.springframework.ui.context.support.ResourceBundleThemeSource"> 
		<property name="basenamePrefix" value="themes/"></property> </bean> -->
	<bean id="themeResolver"
		class="org.springframework.web.servlet.theme.CookieThemeResolver">
		<property name="defaultThemeName">
			<value>cool</value>
		</property>
	</bean>

	<!-- springMVC 返回中文乱码问题 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 升级spring版本的后，上述跨域并不支持所有浏览器。经测试，Safari正常，chrome异常。重新翻了一下最新的文档后，得到最新的跨域配置如下： -->
	<!-- <mvc:cors> <mvc:mapping path="/**" allowed-origins="*" allow-credentials="true" 
		max-age="1800" allowed-methods="GET,POST,OPTIONS" /> </mvc:cors> -->
	
	<!-- 所有swagger目录的访问，直接访问location指定的目录 -->
	 <bean class="com.wangrun.swagger2.SwaggerConfig" /> <!--使用bean申明可以去掉@configuration-->
		 <!--扫描@configuration注解-->
		<context:component-scan base-package="com.wangrun.swagger2"/>
		<!--配置静态资源访问-->
		<mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
		<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>
</beans>  